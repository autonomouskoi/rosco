// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.8.0
// source: rosco/rosco.proto

package rosco

import (
	binary "encoding/binary"
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	math "math"
	strconv "strconv"
)

type BusTopic int32

const (
	BusTopic_ROSCO_EVENT   BusTopic = 0
	BusTopic_ROSCO_REQUEST BusTopic = 1
	BusTopic_ROSCO_COMMAND BusTopic = 2
)

// Enum value maps for BusTopic.
var (
	BusTopic_name = map[int32]string{
		0: "ROSCO_EVENT",
		1: "ROSCO_REQUEST",
		2: "ROSCO_COMMAND",
	}
	BusTopic_value = map[string]int32{
		"ROSCO_EVENT":   0,
		"ROSCO_REQUEST": 1,
		"ROSCO_COMMAND": 2,
	}
)

func (x BusTopic) Enum() *BusTopic {
	p := new(BusTopic)
	*p = x
	return p
}

func (x BusTopic) String() string {
	name, valid := BusTopic_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type MessageTypeRequest int32

const (
	MessageTypeRequest_CONFIG_GET_REQ  MessageTypeRequest = 0
	MessageTypeRequest_CONFIG_GET_RESP MessageTypeRequest = 1
	MessageTypeRequest_SCRIPT_RUN_REQ  MessageTypeRequest = 4
	MessageTypeRequest_SCRIPT_RUN_RESP MessageTypeRequest = 5
)

// Enum value maps for MessageTypeRequest.
var (
	MessageTypeRequest_name = map[int32]string{
		0: "CONFIG_GET_REQ",
		1: "CONFIG_GET_RESP",
		4: "SCRIPT_RUN_REQ",
		5: "SCRIPT_RUN_RESP",
	}
	MessageTypeRequest_value = map[string]int32{
		"CONFIG_GET_REQ":  0,
		"CONFIG_GET_RESP": 1,
		"SCRIPT_RUN_REQ":  4,
		"SCRIPT_RUN_RESP": 5,
	}
)

func (x MessageTypeRequest) Enum() *MessageTypeRequest {
	p := new(MessageTypeRequest)
	*p = x
	return p
}

func (x MessageTypeRequest) String() string {
	name, valid := MessageTypeRequest_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type MessageTypeCommand int32

const (
	MessageTypeCommand_CONFIG_SET_REQ  MessageTypeCommand = 0
	MessageTypeCommand_CONFIG_SET_RESP MessageTypeCommand = 1
)

// Enum value maps for MessageTypeCommand.
var (
	MessageTypeCommand_name = map[int32]string{
		0: "CONFIG_SET_REQ",
		1: "CONFIG_SET_RESP",
	}
	MessageTypeCommand_value = map[string]int32{
		"CONFIG_SET_REQ":  0,
		"CONFIG_SET_RESP": 1,
	}
)

func (x MessageTypeCommand) Enum() *MessageTypeCommand {
	p := new(MessageTypeCommand)
	*p = x
	return p
}

func (x MessageTypeCommand) String() string {
	name, valid := MessageTypeCommand_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type ScriptActionType int32

const (
	ScriptActionType_ActionTypeSet   ScriptActionType = 0
	ScriptActionType_ActionTypeFade  ScriptActionType = 1
	ScriptActionType_ActionTypeSleep ScriptActionType = 2
)

// Enum value maps for ScriptActionType.
var (
	ScriptActionType_name = map[int32]string{
		0: "ActionTypeSet",
		1: "ActionTypeFade",
		2: "ActionTypeSleep",
	}
	ScriptActionType_value = map[string]int32{
		"ActionTypeSet":   0,
		"ActionTypeFade":  1,
		"ActionTypeSleep": 2,
	}
)

func (x ScriptActionType) Enum() *ScriptActionType {
	p := new(ScriptActionType)
	*p = x
	return p
}

func (x ScriptActionType) String() string {
	name, valid := ScriptActionType_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Config struct {
	unknownFields []byte
	Scripts       map[int32]*Script   `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Triggers      map[string]*Trigger `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
}

func (*Config) ProtoMessage() {}

func (x *Config) GetScripts() map[int32]*Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *Config) GetTriggers() map[string]*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type ConfigGetRequest struct {
	unknownFields []byte
}

func (x *ConfigGetRequest) Reset() {
	*x = ConfigGetRequest{}
}

func (*ConfigGetRequest) ProtoMessage() {}

type ConfigGetResponse struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigGetResponse) Reset() {
	*x = ConfigGetResponse{}
}

func (*ConfigGetResponse) ProtoMessage() {}

func (x *ConfigGetResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type OSCValue struct {
	unknownFields []byte
	// Types that are assignable to Value:
	//
	//	*OSCValue_Nil
	//	*OSCValue_Int32
	//	*OSCValue_Float32
	//	*OSCValue_String_
	//	*OSCValue_Blob
	//	*OSCValue_Int64
	//	*OSCValue_True
	//	*OSCValue_False
	Value isOSCValue_Value `protobuf_oneof:"value"`
}

func (x *OSCValue) Reset() {
	*x = OSCValue{}
}

func (*OSCValue) ProtoMessage() {}

func (m *OSCValue) GetValue() isOSCValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *OSCValue) GetNil() int32 {
	if x, ok := x.GetValue().(*OSCValue_Nil); ok {
		return x.Nil
	}
	return 0
}

func (x *OSCValue) GetInt32() int32 {
	if x, ok := x.GetValue().(*OSCValue_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *OSCValue) GetFloat32() float32 {
	if x, ok := x.GetValue().(*OSCValue_Float32); ok {
		return x.Float32
	}
	return 0
}

func (x *OSCValue) GetString_() string {
	if x, ok := x.GetValue().(*OSCValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *OSCValue) GetBlob() []byte {
	if x, ok := x.GetValue().(*OSCValue_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *OSCValue) GetInt64() int64 {
	if x, ok := x.GetValue().(*OSCValue_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *OSCValue) GetTrue() bool {
	if x, ok := x.GetValue().(*OSCValue_True); ok {
		return x.True
	}
	return false
}

func (x *OSCValue) GetFalse() bool {
	if x, ok := x.GetValue().(*OSCValue_False); ok {
		return x.False
	}
	return false
}

type isOSCValue_Value interface {
	isOSCValue_Value()
}

type OSCValue_Nil struct {
	Nil int32 `protobuf:"varint,1,opt,name=nil,proto3,oneof"`
}

type OSCValue_Int32 struct {
	Int32 int32 `protobuf:"varint,2,opt,name=int32,proto3,oneof"`
}

type OSCValue_Float32 struct {
	Float32 float32 `protobuf:"fixed32,3,opt,name=float32,proto3,oneof"`
}

type OSCValue_String_ struct {
	String_ string `protobuf:"bytes,4,opt,name=string,proto3,oneof"`
}

type OSCValue_Blob struct {
	Blob []byte `protobuf:"bytes,5,opt,name=blob,proto3,oneof"`
}

type OSCValue_Int64 struct {
	Int64 int64 `protobuf:"varint,6,opt,name=int64,proto3,oneof"`
}

type OSCValue_True struct {
	// int64    time     = 7;
	// int64    double   = 8;
	True bool `protobuf:"varint,9,opt,name=true,proto3,oneof"`
}

type OSCValue_False struct {
	False bool `protobuf:"varint,10,opt,name=false,proto3,oneof"`
}

func (*OSCValue_Nil) isOSCValue_Value() {}

func (*OSCValue_Int32) isOSCValue_Value() {}

func (*OSCValue_Float32) isOSCValue_Value() {}

func (*OSCValue_String_) isOSCValue_Value() {}

func (*OSCValue_Blob) isOSCValue_Value() {}

func (*OSCValue_Int64) isOSCValue_Value() {}

func (*OSCValue_True) isOSCValue_Value() {}

func (*OSCValue_False) isOSCValue_Value() {}

type ConfigSetRequest struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigSetRequest) Reset() {
	*x = ConfigSetRequest{}
}

func (*ConfigSetRequest) ProtoMessage() {}

func (x *ConfigSetRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigSetResponse struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigSetResponse) Reset() {
	*x = ConfigSetResponse{}
}

func (*ConfigSetResponse) ProtoMessage() {}

func (x *ConfigSetResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ScriptAction struct {
	unknownFields []byte
	Type          ScriptActionType `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Address       string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Values        []*OSCValue      `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	DurationMs    uint32           `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"durationMs,omitempty"`
}

func (x *ScriptAction) Reset() {
	*x = ScriptAction{}
}

func (*ScriptAction) ProtoMessage() {}

func (x *ScriptAction) GetType() ScriptActionType {
	if x != nil {
		return x.Type
	}
	return ScriptActionType_ActionTypeSet
}

func (x *ScriptAction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ScriptAction) GetValues() []*OSCValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ScriptAction) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type Script struct {
	unknownFields []byte
	Name          string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Actions       []*ScriptAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
}

func (*Script) ProtoMessage() {}

func (x *Script) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Script) GetActions() []*ScriptAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ScriptRunRequest struct {
	unknownFields []byte
	Target        string  `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Script        *Script `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	ScriptId      int32   `protobuf:"varint,3,opt,name=script_id,json=scriptId,proto3" json:"scriptId,omitempty"`
}

func (x *ScriptRunRequest) Reset() {
	*x = ScriptRunRequest{}
}

func (*ScriptRunRequest) ProtoMessage() {}

func (x *ScriptRunRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ScriptRunRequest) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *ScriptRunRequest) GetScriptId() int32 {
	if x != nil {
		return x.ScriptId
	}
	return 0
}

type ScriptRunResponse struct {
	unknownFields []byte
}

func (x *ScriptRunResponse) Reset() {
	*x = ScriptRunResponse{}
}

func (*ScriptRunResponse) ProtoMessage() {}

type Trigger struct {
	unknownFields []byte
	Target        string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ScriptId      int32  `protobuf:"varint,2,opt,name=script_id,json=scriptId,proto3" json:"scriptId,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Trigger) GetScriptId() int32 {
	if x != nil {
		return x.ScriptId
	}
	return 0
}

type Config_ScriptsEntry struct {
	unknownFields []byte
	Key           int32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Script `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Config_ScriptsEntry) Reset() {
	*x = Config_ScriptsEntry{}
}

func (*Config_ScriptsEntry) ProtoMessage() {}

func (x *Config_ScriptsEntry) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Config_ScriptsEntry) GetValue() *Script {
	if x != nil {
		return x.Value
	}
	return nil
}

type Config_TriggersEntry struct {
	unknownFields []byte
	Key           string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Trigger `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Config_TriggersEntry) Reset() {
	*x = Config_TriggersEntry{}
}

func (*Config_TriggersEntry) ProtoMessage() {}

func (x *Config_TriggersEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config_TriggersEntry) GetValue() *Trigger {
	if x != nil {
		return x.Value
	}
	return nil
}

func (m *Config) CloneVT() *Config {
	if m == nil {
		return (*Config)(nil)
	}
	r := new(Config)
	if rhs := m.Scripts; rhs != nil {
		tmpContainer := make(map[int32]*Script, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Scripts = tmpContainer
	}
	if rhs := m.Triggers; rhs != nil {
		tmpContainer := make(map[string]*Trigger, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Triggers = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Config) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigGetRequest) CloneVT() *ConfigGetRequest {
	if m == nil {
		return (*ConfigGetRequest)(nil)
	}
	r := new(ConfigGetRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigGetRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigGetResponse) CloneVT() *ConfigGetResponse {
	if m == nil {
		return (*ConfigGetResponse)(nil)
	}
	r := new(ConfigGetResponse)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigGetResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *OSCValue) CloneVT() *OSCValue {
	if m == nil {
		return (*OSCValue)(nil)
	}
	r := new(OSCValue)
	if m.Value != nil {
		r.Value = m.Value.(interface{ CloneOneofVT() isOSCValue_Value }).CloneOneofVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *OSCValue) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *OSCValue_Nil) CloneVT() *OSCValue_Nil {
	if m == nil {
		return (*OSCValue_Nil)(nil)
	}
	r := new(OSCValue_Nil)
	r.Nil = m.Nil
	return r
}

func (m *OSCValue_Nil) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_Int32) CloneVT() *OSCValue_Int32 {
	if m == nil {
		return (*OSCValue_Int32)(nil)
	}
	r := new(OSCValue_Int32)
	r.Int32 = m.Int32
	return r
}

func (m *OSCValue_Int32) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_Float32) CloneVT() *OSCValue_Float32 {
	if m == nil {
		return (*OSCValue_Float32)(nil)
	}
	r := new(OSCValue_Float32)
	r.Float32 = m.Float32
	return r
}

func (m *OSCValue_Float32) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_String_) CloneVT() *OSCValue_String_ {
	if m == nil {
		return (*OSCValue_String_)(nil)
	}
	r := new(OSCValue_String_)
	r.String_ = m.String_
	return r
}

func (m *OSCValue_String_) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_Blob) CloneVT() *OSCValue_Blob {
	if m == nil {
		return (*OSCValue_Blob)(nil)
	}
	r := new(OSCValue_Blob)
	if rhs := m.Blob; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Blob = tmpBytes
	}
	return r
}

func (m *OSCValue_Blob) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_Int64) CloneVT() *OSCValue_Int64 {
	if m == nil {
		return (*OSCValue_Int64)(nil)
	}
	r := new(OSCValue_Int64)
	r.Int64 = m.Int64
	return r
}

func (m *OSCValue_Int64) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_True) CloneVT() *OSCValue_True {
	if m == nil {
		return (*OSCValue_True)(nil)
	}
	r := new(OSCValue_True)
	r.True = m.True
	return r
}

func (m *OSCValue_True) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *OSCValue_False) CloneVT() *OSCValue_False {
	if m == nil {
		return (*OSCValue_False)(nil)
	}
	r := new(OSCValue_False)
	r.False = m.False
	return r
}

func (m *OSCValue_False) CloneOneofVT() isOSCValue_Value {
	return m.CloneVT()
}

func (m *ConfigSetRequest) CloneVT() *ConfigSetRequest {
	if m == nil {
		return (*ConfigSetRequest)(nil)
	}
	r := new(ConfigSetRequest)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigSetRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigSetResponse) CloneVT() *ConfigSetResponse {
	if m == nil {
		return (*ConfigSetResponse)(nil)
	}
	r := new(ConfigSetResponse)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigSetResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ScriptAction) CloneVT() *ScriptAction {
	if m == nil {
		return (*ScriptAction)(nil)
	}
	r := new(ScriptAction)
	r.Type = m.Type
	r.Address = m.Address
	r.DurationMs = m.DurationMs
	if rhs := m.Values; rhs != nil {
		tmpContainer := make([]*OSCValue, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Values = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ScriptAction) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Script) CloneVT() *Script {
	if m == nil {
		return (*Script)(nil)
	}
	r := new(Script)
	r.Name = m.Name
	if rhs := m.Actions; rhs != nil {
		tmpContainer := make([]*ScriptAction, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Actions = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Script) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ScriptRunRequest) CloneVT() *ScriptRunRequest {
	if m == nil {
		return (*ScriptRunRequest)(nil)
	}
	r := new(ScriptRunRequest)
	r.Target = m.Target
	r.Script = m.Script.CloneVT()
	r.ScriptId = m.ScriptId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ScriptRunRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ScriptRunResponse) CloneVT() *ScriptRunResponse {
	if m == nil {
		return (*ScriptRunResponse)(nil)
	}
	r := new(ScriptRunResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ScriptRunResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Trigger) CloneVT() *Trigger {
	if m == nil {
		return (*Trigger)(nil)
	}
	r := new(Trigger)
	r.Target = m.Target
	r.ScriptId = m.ScriptId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Trigger) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Config) EqualVT(that *Config) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Scripts) != len(that.Scripts) {
		return false
	}
	for i, vx := range this.Scripts {
		vy, ok := that.Scripts[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Script{}
			}
			if q == nil {
				q = &Script{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Triggers) != len(that.Triggers) {
		return false
	}
	for i, vx := range this.Triggers {
		vy, ok := that.Triggers[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Trigger{}
			}
			if q == nil {
				q = &Trigger{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Config) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Config)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigGetRequest) EqualVT(that *ConfigGetRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigGetRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigGetRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigGetResponse) EqualVT(that *ConfigGetResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigGetResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigGetResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *OSCValue) EqualVT(that *OSCValue) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value == nil && that.Value != nil {
		return false
	} else if this.Value != nil {
		if that.Value == nil {
			return false
		}
		if !this.Value.(interface{ EqualVT(isOSCValue_Value) bool }).EqualVT(that.Value) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *OSCValue) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*OSCValue)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *OSCValue_Nil) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_Nil)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Nil != that.Nil {
		return false
	}
	return true
}

func (this *OSCValue_Int32) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_Int32)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Int32 != that.Int32 {
		return false
	}
	return true
}

func (this *OSCValue_Float32) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_Float32)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Float32 != that.Float32 {
		return false
	}
	return true
}

func (this *OSCValue_String_) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_String_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.String_ != that.String_ {
		return false
	}
	return true
}

func (this *OSCValue_Blob) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_Blob)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if string(this.Blob) != string(that.Blob) {
		return false
	}
	return true
}

func (this *OSCValue_Int64) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_Int64)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Int64 != that.Int64 {
		return false
	}
	return true
}

func (this *OSCValue_True) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_True)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.True != that.True {
		return false
	}
	return true
}

func (this *OSCValue_False) EqualVT(thatIface isOSCValue_Value) bool {
	that, ok := thatIface.(*OSCValue_False)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.False != that.False {
		return false
	}
	return true
}

func (this *ConfigSetRequest) EqualVT(that *ConfigSetRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigSetRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigSetRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigSetResponse) EqualVT(that *ConfigSetResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigSetResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigSetResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ScriptAction) EqualVT(that *ScriptAction) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Address != that.Address {
		return false
	}
	if len(this.Values) != len(that.Values) {
		return false
	}
	for i, vx := range this.Values {
		vy := that.Values[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &OSCValue{}
			}
			if q == nil {
				q = &OSCValue{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.DurationMs != that.DurationMs {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ScriptAction) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ScriptAction)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Script) EqualVT(that *Script) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Actions) != len(that.Actions) {
		return false
	}
	for i, vx := range this.Actions {
		vy := that.Actions[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ScriptAction{}
			}
			if q == nil {
				q = &ScriptAction{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Script) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Script)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ScriptRunRequest) EqualVT(that *ScriptRunRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target != that.Target {
		return false
	}
	if !this.Script.EqualVT(that.Script) {
		return false
	}
	if this.ScriptId != that.ScriptId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ScriptRunRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ScriptRunRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ScriptRunResponse) EqualVT(that *ScriptRunResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ScriptRunResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ScriptRunResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Trigger) EqualVT(that *Trigger) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Target != that.Target {
		return false
	}
	if this.ScriptId != that.ScriptId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Trigger) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Trigger)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the BusTopic to JSON.
func (x BusTopic) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), BusTopic_name)
}

// MarshalText marshals the BusTopic to text.
func (x BusTopic) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), BusTopic_name)), nil
}

// MarshalJSON marshals the BusTopic to JSON.
func (x BusTopic) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BusTopic from JSON.
func (x *BusTopic) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(BusTopic_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read BusTopic enum: %v", err)
		return
	}
	*x = BusTopic(v)
}

// UnmarshalText unmarshals the BusTopic from text.
func (x *BusTopic) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), BusTopic_value)
	if err != nil {
		return err
	}
	*x = BusTopic(i)
	return nil
}

// UnmarshalJSON unmarshals the BusTopic from JSON.
func (x *BusTopic) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageTypeRequest to JSON.
func (x MessageTypeRequest) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeRequest_name)
}

// MarshalText marshals the MessageTypeRequest to text.
func (x MessageTypeRequest) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeRequest_name)), nil
}

// MarshalJSON marshals the MessageTypeRequest to JSON.
func (x MessageTypeRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeRequest from JSON.
func (x *MessageTypeRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeRequest_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeRequest enum: %v", err)
		return
	}
	*x = MessageTypeRequest(v)
}

// UnmarshalText unmarshals the MessageTypeRequest from text.
func (x *MessageTypeRequest) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeRequest_value)
	if err != nil {
		return err
	}
	*x = MessageTypeRequest(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeRequest from JSON.
func (x *MessageTypeRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageTypeCommand to JSON.
func (x MessageTypeCommand) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeCommand_name)
}

// MarshalText marshals the MessageTypeCommand to text.
func (x MessageTypeCommand) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeCommand_name)), nil
}

// MarshalJSON marshals the MessageTypeCommand to JSON.
func (x MessageTypeCommand) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeCommand from JSON.
func (x *MessageTypeCommand) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeCommand_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeCommand enum: %v", err)
		return
	}
	*x = MessageTypeCommand(v)
}

// UnmarshalText unmarshals the MessageTypeCommand from text.
func (x *MessageTypeCommand) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeCommand_value)
	if err != nil {
		return err
	}
	*x = MessageTypeCommand(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeCommand from JSON.
func (x *MessageTypeCommand) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ScriptActionType to JSON.
func (x ScriptActionType) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), ScriptActionType_name)
}

// MarshalText marshals the ScriptActionType to text.
func (x ScriptActionType) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), ScriptActionType_name)), nil
}

// MarshalJSON marshals the ScriptActionType to JSON.
func (x ScriptActionType) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ScriptActionType from JSON.
func (x *ScriptActionType) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(ScriptActionType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ScriptActionType enum: %v", err)
		return
	}
	*x = ScriptActionType(v)
}

// UnmarshalText unmarshals the ScriptActionType from text.
func (x *ScriptActionType) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), ScriptActionType_value)
	if err != nil {
		return err
	}
	*x = ScriptActionType(i)
	return nil
}

// UnmarshalJSON unmarshals the ScriptActionType from JSON.
func (x *ScriptActionType) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config_ScriptsEntry message to JSON.
func (x *Config_ScriptsEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != 0 || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteInt32(x.Key)
	}
	if x.Value != nil || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		x.Value.MarshalProtoJSON(s.WithField("value"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config_ScriptsEntry to JSON.
func (x *Config_ScriptsEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config_ScriptsEntry message from JSON.
func (x *Config_ScriptsEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadInt32()
		case "value":
			if s.ReadNil() {
				x.Value = nil
				return
			}
			x.Value = &Script{}
			x.Value.UnmarshalProtoJSON(s.WithField("value", true))
		}
	})
}

// UnmarshalJSON unmarshals the Config_ScriptsEntry from JSON.
func (x *Config_ScriptsEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config_TriggersEntry message to JSON.
func (x *Config_TriggersEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != "" || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteString(x.Key)
	}
	if x.Value != nil || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		x.Value.MarshalProtoJSON(s.WithField("value"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config_TriggersEntry to JSON.
func (x *Config_TriggersEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config_TriggersEntry message from JSON.
func (x *Config_TriggersEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadString()
		case "value":
			if s.ReadNil() {
				x.Value = nil
				return
			}
			x.Value = &Trigger{}
			x.Value.UnmarshalProtoJSON(s.WithField("value", true))
		}
	})
}

// UnmarshalJSON unmarshals the Config_TriggersEntry from JSON.
func (x *Config_TriggersEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config message to JSON.
func (x *Config) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Scripts != nil || s.HasField("scripts") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("scripts")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Scripts {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectInt32Field(k)
			v.MarshalProtoJSON(s.WithField("scripts"))
		}
		s.WriteObjectEnd()
	}
	if x.Triggers != nil || s.HasField("triggers") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("triggers")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Triggers {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			v.MarshalProtoJSON(s.WithField("triggers"))
		}
		s.WriteObjectEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config to JSON.
func (x *Config) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config message from JSON.
func (x *Config) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "scripts":
			s.AddField("scripts")
			if s.ReadNil() {
				x.Scripts = nil
				return
			}
			x.Scripts = make(map[int32]*Script)
			s.ReadInt32Map(func(key int32) {
				var v Script
				v.UnmarshalProtoJSON(s)
				x.Scripts[key] = &v
			})
		case "triggers":
			s.AddField("triggers")
			if s.ReadNil() {
				x.Triggers = nil
				return
			}
			x.Triggers = make(map[string]*Trigger)
			s.ReadStringMap(func(key string) {
				var v Trigger
				v.UnmarshalProtoJSON(s)
				x.Triggers[key] = &v
			})
		}
	})
}

// UnmarshalJSON unmarshals the Config from JSON.
func (x *Config) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigGetRequest message to JSON.
func (x *ConfigGetRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigGetRequest to JSON.
func (x *ConfigGetRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigGetRequest message from JSON.
func (x *ConfigGetRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the ConfigGetRequest from JSON.
func (x *ConfigGetRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigGetResponse message to JSON.
func (x *ConfigGetResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigGetResponse to JSON.
func (x *ConfigGetResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigGetResponse message from JSON.
func (x *ConfigGetResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigGetResponse from JSON.
func (x *ConfigGetResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the OSCValue message to JSON.
func (x *OSCValue) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != nil {
		switch ov := x.Value.(type) {
		case *OSCValue_Nil:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("nil")
			s.WriteInt32(ov.Nil)
		case *OSCValue_Int32:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int32")
			s.WriteInt32(ov.Int32)
		case *OSCValue_Float32:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("float32")
			s.WriteFloat32(ov.Float32)
		case *OSCValue_String_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("string")
			s.WriteString(ov.String_)
		case *OSCValue_Blob:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("blob")
			s.WriteBytes(ov.Blob)
		case *OSCValue_Int64:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int64")
			s.WriteInt64(ov.Int64)
		case *OSCValue_True:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("true")
			s.WriteBool(ov.True)
		case *OSCValue_False:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("false")
			s.WriteBool(ov.False)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the OSCValue to JSON.
func (x *OSCValue) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the OSCValue message from JSON.
func (x *OSCValue) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "nil":
			s.AddField("nil")
			ov := &OSCValue_Nil{}
			x.Value = ov
			ov.Nil = s.ReadInt32()
		case "int32":
			s.AddField("int32")
			ov := &OSCValue_Int32{}
			x.Value = ov
			ov.Int32 = s.ReadInt32()
		case "float32":
			s.AddField("float32")
			ov := &OSCValue_Float32{}
			x.Value = ov
			ov.Float32 = s.ReadFloat32()
		case "string":
			s.AddField("string")
			ov := &OSCValue_String_{}
			x.Value = ov
			ov.String_ = s.ReadString()
		case "blob":
			s.AddField("blob")
			ov := &OSCValue_Blob{}
			x.Value = ov
			ov.Blob = s.ReadBytes()
		case "int64":
			s.AddField("int64")
			ov := &OSCValue_Int64{}
			x.Value = ov
			ov.Int64 = s.ReadInt64()
		case "true":
			s.AddField("true")
			ov := &OSCValue_True{}
			x.Value = ov
			ov.True = s.ReadBool()
		case "false":
			s.AddField("false")
			ov := &OSCValue_False{}
			x.Value = ov
			ov.False = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the OSCValue from JSON.
func (x *OSCValue) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigSetRequest message to JSON.
func (x *ConfigSetRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigSetRequest to JSON.
func (x *ConfigSetRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigSetRequest message from JSON.
func (x *ConfigSetRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigSetRequest from JSON.
func (x *ConfigSetRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigSetResponse message to JSON.
func (x *ConfigSetResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigSetResponse to JSON.
func (x *ConfigSetResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigSetResponse message from JSON.
func (x *ConfigSetResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigSetResponse from JSON.
func (x *ConfigSetResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ScriptAction message to JSON.
func (x *ScriptAction) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Type != 0 || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if x.Address != "" || s.HasField("address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("address")
		s.WriteString(x.Address)
	}
	if len(x.Values) > 0 || s.HasField("values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Values {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("values"))
		}
		s.WriteArrayEnd()
	}
	if x.DurationMs != 0 || s.HasField("durationMs") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("durationMs")
		s.WriteUint32(x.DurationMs)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ScriptAction to JSON.
func (x *ScriptAction) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ScriptAction message from JSON.
func (x *ScriptAction) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "type":
			s.AddField("type")
			x.Type.UnmarshalProtoJSON(s)
		case "address":
			s.AddField("address")
			x.Address = s.ReadString()
		case "values":
			s.AddField("values")
			if s.ReadNil() {
				x.Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Values = append(x.Values, nil)
					return
				}
				v := &OSCValue{}
				v.UnmarshalProtoJSON(s.WithField("values", false))
				if s.Err() != nil {
					return
				}
				x.Values = append(x.Values, v)
			})
		case "duration_ms", "durationMs":
			s.AddField("duration_ms")
			x.DurationMs = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the ScriptAction from JSON.
func (x *ScriptAction) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Script message to JSON.
func (x *Script) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if len(x.Actions) > 0 || s.HasField("actions") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("actions")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Actions {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("actions"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Script to JSON.
func (x *Script) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Script message from JSON.
func (x *Script) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "actions":
			s.AddField("actions")
			if s.ReadNil() {
				x.Actions = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Actions = append(x.Actions, nil)
					return
				}
				v := &ScriptAction{}
				v.UnmarshalProtoJSON(s.WithField("actions", false))
				if s.Err() != nil {
					return
				}
				x.Actions = append(x.Actions, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the Script from JSON.
func (x *Script) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ScriptRunRequest message to JSON.
func (x *ScriptRunRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Target != "" || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		s.WriteString(x.Target)
	}
	if x.Script != nil || s.HasField("script") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("script")
		x.Script.MarshalProtoJSON(s.WithField("script"))
	}
	if x.ScriptId != 0 || s.HasField("scriptId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("scriptId")
		s.WriteInt32(x.ScriptId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ScriptRunRequest to JSON.
func (x *ScriptRunRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ScriptRunRequest message from JSON.
func (x *ScriptRunRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "target":
			s.AddField("target")
			x.Target = s.ReadString()
		case "script":
			if s.ReadNil() {
				x.Script = nil
				return
			}
			x.Script = &Script{}
			x.Script.UnmarshalProtoJSON(s.WithField("script", true))
		case "script_id", "scriptId":
			s.AddField("script_id")
			x.ScriptId = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the ScriptRunRequest from JSON.
func (x *ScriptRunRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ScriptRunResponse message to JSON.
func (x *ScriptRunResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ScriptRunResponse to JSON.
func (x *ScriptRunResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ScriptRunResponse message from JSON.
func (x *ScriptRunResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the ScriptRunResponse from JSON.
func (x *ScriptRunResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Trigger message to JSON.
func (x *Trigger) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Target != "" || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		s.WriteString(x.Target)
	}
	if x.ScriptId != 0 || s.HasField("scriptId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("scriptId")
		s.WriteInt32(x.ScriptId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Trigger to JSON.
func (x *Trigger) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Trigger message from JSON.
func (x *Trigger) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "target":
			s.AddField("target")
			x.Target = s.ReadString()
		case "script_id", "scriptId":
			s.AddField("script_id")
			x.ScriptId = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Trigger from JSON.
func (x *Trigger) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Config) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Config) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Triggers) > 0 {
		for k := range m.Triggers {
			v := m.Triggers[k]
			baseI := i
			size, err := v.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Scripts) > 0 {
		for k := range m.Scripts {
			v := m.Scripts[k]
			baseI := i
			size, err := v.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfigGetRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigGetRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigGetRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ConfigGetResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigGetResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigGetResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSCValue) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSCValue) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Value.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *OSCValue_Nil) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_Nil) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Nil))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *OSCValue_Int32) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_Int32) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Int32))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *OSCValue_Float32) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_Float32) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float32))))
	i--
	dAtA[i] = 0x1d
	return len(dAtA) - i, nil
}
func (m *OSCValue_String_) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_String_) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *OSCValue_Blob) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_Blob) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Blob)
	copy(dAtA[i:], m.Blob)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Blob)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *OSCValue_Int64) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_Int64) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Int64))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *OSCValue_True) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_True) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.True {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *OSCValue_False) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OSCValue_False) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.False {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ConfigSetRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSetRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigSetRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSetResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSetResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigSetResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScriptAction) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptAction) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ScriptAction) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.DurationMs != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.DurationMs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Values[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Script) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Script) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Script) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Actions[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScriptRunRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptRunRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ScriptRunRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ScriptId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.ScriptId))
		i--
		dAtA[i] = 0x18
	}
	if m.Script != nil {
		size, err := m.Script.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScriptRunResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptRunResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ScriptRunResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *Trigger) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Trigger) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ScriptId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.ScriptId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Config) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for k, v := range m.Scripts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.SizeVT()
			}
			l += 1 + protobuf_go_lite.SizeOfVarint(uint64(l))
			mapEntrySize := 1 + protobuf_go_lite.SizeOfVarint(uint64(k)) + l
			n += mapEntrySize + 1 + protobuf_go_lite.SizeOfVarint(uint64(mapEntrySize))
		}
	}
	if len(m.Triggers) > 0 {
		for k, v := range m.Triggers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.SizeVT()
			}
			l += 1 + protobuf_go_lite.SizeOfVarint(uint64(l))
			mapEntrySize := 1 + len(k) + protobuf_go_lite.SizeOfVarint(uint64(len(k))) + l
			n += mapEntrySize + 1 + protobuf_go_lite.SizeOfVarint(uint64(mapEntrySize))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConfigGetRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ConfigGetResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *OSCValue) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Value.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *OSCValue_Nil) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Nil))
	return n
}
func (m *OSCValue_Int32) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Int32))
	return n
}
func (m *OSCValue_Float32) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *OSCValue_String_) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *OSCValue_Blob) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blob)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *OSCValue_Int64) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Int64))
	return n
}
func (m *OSCValue_True) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *OSCValue_False) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ConfigSetRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConfigSetResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ScriptAction) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Type))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.DurationMs != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.DurationMs))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Script) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ScriptRunRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Script != nil {
		l = m.Script.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ScriptId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.ScriptId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ScriptRunResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *Trigger) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ScriptId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.ScriptId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Config) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scripts == nil {
				m.Scripts = make(map[int32]*Script)
			}
			var mapkey int32
			var mapvalue *Script
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Script{}
					if err := mapvalue.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scripts[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Triggers == nil {
				m.Triggers = make(map[string]*Trigger)
			}
			var mapkey string
			var mapvalue *Trigger
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Trigger{}
					if err := mapvalue.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Triggers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigGetRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigGetResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSCValue) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSCValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSCValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nil", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &OSCValue_Nil{Nil: v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &OSCValue_Int32{Int32: v}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float32", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &OSCValue_Float32{Float32: float32(math.Float32frombits(v))}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &OSCValue_String_{String_: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &OSCValue_Blob{Blob: v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &OSCValue_Int64{Int64: v}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field True", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &OSCValue_True{True: b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field False", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &OSCValue_False{False: b}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSetRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSetResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptAction) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ScriptActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &OSCValue{})
			if err := m.Values[len(m.Values)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMs", wireType)
			}
			m.DurationMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationMs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Script) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Script: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Script: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &ScriptAction{})
			if err := m.Actions[len(m.Actions)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptRunRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &Script{}
			}
			if err := m.Script.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptId", wireType)
			}
			m.ScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptRunResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trigger) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptId", wireType)
			}
			m.ScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
